"""Vsak si izbere 2 funkciji:
Nika: Konvolucija in Svetloba, blur
Alen: Konvolucija in Color_filter in rotation
Dominik: Konvolucija in noise in kontrast"""

import cv2
import numpy as np
import imageio
from scipy.signal import convolve2d

def add_noise(image, noise_level=1):
    noise = np.random.randn(*image.shape) * noise_level
    noisy_image = image + noise.astype(np.uint8)
    return np.clip(noisy_image, 0, 255)

def apply_convolution(image, kernel):
    image = image.astype(np.float32)
    convolved_image = convolve2d(image, kernel, boundary='symm', mode='same')
    return convolved_image.astype(np.uint8)

def adjust_contrast(image, contrast_factor=1.0):
    image = image.astype(np.float32)
    mean = np.mean(image)
    adjusted_image = contrast_factor * (image - mean) + mean
    return np.clip(adjusted_image, 0, 255).astype(np.uint8)

def random_augmentation(image, kernel):
    # Naključna izbira med dodajanjem šuma, konvolucijo in spremembo kontrasta
    augmentations = [add_noise, apply_convolution, adjust_contrast]
    augmentation = np.random.choice(augmentations)
    
    if augmentation == add_noise:
        return add_noise(image, noise_level=np.random.uniform(0.5, 2.0))
    elif augmentation == apply_convolution:
        return apply_convolution(image, kernel)
    elif augmentation == adjust_contrast:
        return adjust_contrast(image, contrast_factor=np.random.uniform(0.5, 1.5))

def transform(frame, kernel):
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GREY)
    frame = random_augmentation(frame, kernel)
    return frame

def process_video(input_video_path, kernel):
    reader = imageio.get_reader(input_video_path)
    fps = reader.get_meta_data()['fps']
    augmented_frames = []

    for frame in reader:
        frame = transform(frame, kernel)
        augmented_frames.append(frame)

    return {'video': augmented_frames}

if __name__ == '__main__':
    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
    augmented_data = process_video('VIDEO.mp4', kernel)
    
    # Tu bi lahko shranili ali uporabili augmented_data
    output_video_path = 'output_video5.mp4'
    writer = imageio.get_writer(output_video_path, fps=60)

    for frame in augmented_data['video']:
        writer.append_data(frame)
    
    writer.close()
